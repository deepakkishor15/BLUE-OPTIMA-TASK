control@control:~$ kubectl create namespace user1-ns
namespace/user1-ns created
control@control:~$ kubectl create namespace user2-ns
namespace/user2-ns created
control@control:~$ # Create key and cert for user1
control@control:~$ openssl genrsa -out user1.key 2048
control@control:~$ openssl req -new -key user1.key -out user1.csr -subj "/CN=user1"
control@control:~$ openssl x509 -req -in user1.csr -CA ~/.minikube/ca.crt -CAkey ~/.minikube/ca.key -CAcreateserial -out user1.crt -days 500
Certificate request self-signature ok
subject=CN = user1
control@control:~$
control@control:~$ # Create key and cert for user2
control@control:~$ openssl genrsa -out user2.key 2048
control@control:~$ openssl req -new -key user2.key -out user2.csr -subj "/CN=user2"
control@control:~$ openssl x509 -req -in user2.csr -CA ~/.minikube/ca.crt -CAkey ~/.minikube/ca.key -CAcreateserial -out user2.crt -days 500
Certificate request self-signature ok
subject=CN = user2
control@control:~$
control@control:~$ kubectl config set-context user1-context --cluster=minikube --namespace=user1-ns --user=user1
Context "user1-context" created.
control@control:~$
control@control:~$ # Add user2
control@control:~$ kubectl config set-credentials user2 --client-certificate=user2.crt --client-key=user2.key
User "user2" set.
control@control:~$ kubectl config set-context user2-context --cluster=minikube --namespace=user2-ns --user=user2
Context "user2-context" created.
control@control:~$
control@control:~$ kubectl create rolebinding user1-admin-binding \
>   --clusterrole=admin \
>   --user=user1 \
>   --namespace=user1-ns
rolebinding.rbac.authorization.k8s.io/user1-admin-binding created
control@control:~$
control@control:~$ # Role binding for user2
control@control:~$ kubectl create rolebinding user2-admin-binding \
>   --clusterrole=admin \
>   --user=user2 \
>   --namespace=user2-ns
rolebinding.rbac.authorization.k8s.io/user2-admin-binding created
control@control:~$

control@control:~$ kubectl apply -f user1.yaml
deployment.apps/nginx-deploy created
service/nginx-service created
control@control:~$ kubectl apply -f user2.yaml
deployment.apps/nginx-deploy created
service/nginx-service created
control@control:~$

control@control:~$ kubectl apply -f user1-alpine.yaml -n user1-ns
pod/alpine created

control@control:~$ vim user2-alpine.yaml
control@control:~$ kubectl apply -f user2-alpine.yaml -n user2-ns
pod/alpine created
control@control:~$

control@control:~$ kubectl exec -n user1-ns -it alpine -- sh
/ # # then inside:
/ # apk add curl
OK: 12 MiB in 24 packages
/ # curl nginx-service.user1-ns.svc.cluster.local:80
<!DOCTYPE html>
<html>
<head>
<title>Welcome to nginx!</title>
<style>
html { color-scheme: light dark; }
body { width: 35em; margin: 0 auto;
font-family: Tahoma, Verdana, Arial, sans-serif; }
</style>
</head>
<body>
<h1>Welcome to nginx!</h1>
<p>If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.</p>

<p>For online documentation and support please refer to
<a href="http://nginx.org/">nginx.org</a>.<br/>
Commercial support is available at
<a href="http://nginx.com/">nginx.com</a>.</p>

<p><em>Thank you for using nginx.</em></p>
</body>
</html>
/ # curl nginx-service.user1-ns.svc.cluster.local:8080
nginx on 8080/ # curl nginx-service.user2-ns.svc.cluster.local:80
<!DOCTYPE html>
<html>
<head>
<title>Welcome to nginx!</title>
<style>
html { color-scheme: light dark; }
body { width: 35em; margin: 0 auto;
font-family: Tahoma, Verdana, Arial, sans-serif; }
</style>
</head>
<body>
<h1>Welcome to nginx!</h1>
<p>If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.</p>

<p>For online documentation and support please refer to
<a href="http://nginx.org/">nginx.org</a>.<br/>
Commercial support is available at
<a href="http://nginx.com/">nginx.com</a>.</p>

<p><em>Thank you for using nginx.</em></p>
</body>
</html>
/ # curl nginx-service.user2-ns.svc.cluster.local:8080  # should fail after we apply network policy
nginx on 8080/ #

